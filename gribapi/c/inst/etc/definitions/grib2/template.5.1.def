# Copyright 2005-2007 ECMWF
# 
# Licensed under the GNU Lesser General Public License which
# incorporates the terms and conditions of version 3 of the GNU
# General Public License.
# See LICENSE and gpl-3.0.txt for details.


# START 2/template.5.1 ----------------------------------------------------------------------
# TEMPLATE 5.1, Matrix values at grid point -simple packing

include "template.5.packing.def";

#  0, no matrix bit maps present; 1 matrix bit maps present
unsigned[1] matrixBitmapsPresent ;
# same as in edition 1
alias secondaryBitmapPresent=matrixBitmapsPresent;

# deprecated
alias noMatrixBitMapsPresent1MatrixBitMapsPresent = matrixBitmapsPresent;



#  Number of data values encoded in Section 7
unsigned[4] numberOfCodedValues ; # TODO check if this is OK

#  NR - first dimension
# (rows)
unsigned[2] firstDimension ;

alias NR  = firstDimension;
#  NC - second dimension
# (columns)
unsigned[2] secondDimension ;

alias NC =  secondDimension;
#  First dimension coordinate value definition
# (Code Table 5.2)
unsigned[1] firstDimensionCoordinateValueDefinition ;

#  NC1 - number of coefficients or values used to specify first dimension coordinate function
unsigned[1] numberOfCoefficientsOrValuesUsedToSpecifyFirstDimensionCoordinateFunction ;

alias NC1 =  numberOfCoefficientsOrValuesUsedToSpecifyFirstDimensionCoordinateFunction;
#  Second dimension coordinate value definition
# (Code Table 5.2)
unsigned[1] secondDimensionCoordinateValueDefinition ;

#  NC2 - number of coefficients or values used to specify second dimension coordinate function
unsigned[1] numberOfCoefficientsOrValuesUsedToSpecifySecondDimensionCoordinateFunction ;

alias NC2  = numberOfCoefficientsOrValuesUsedToSpecifySecondDimensionCoordinateFunction;
#  First dimension physical significance
# (Code Table 5.3)
unsigned[1] firstDimensionPhysicalSignificance ;

#  Second dimension physical significance
# (Code Table 5.3)
unsigned[1] secondDimensionPhysicalSignificance ;

ieeefloat coefsFirst[NC1];  # TODO: find proper names
ieeefloat coefsSecond[NC2];# TODO: find proper names

if(noMatrixBitMapsPresent1MatrixBitMapsPresent == 1)
{

  constant datumSize             = NC*NR;
  constant secondaryBitmapsCount = numberOfValues + 0; #
  constant secondaryBitmapsSize  = secondaryBitmapsCount/8;

  transient numberOfDataMatrices  = numberOfDataPoints/datumSize;

  transient dummy = 0;
  position offsetBBitmap;
  meta secondaryBitmaps g2bitmap(
          dummy,
          missingValue,
          offsetBSection5,
          section5Length,
          numberOfCodedValues ,
          dummy) : read_only
                    ;

    meta bitmap  data_g2secondary_bitmap(primaryBitmap,
      secondaryBitmaps,
      missingValue,datumSize,numberOfDataPoints) : read_only;

}
