# Copyright 2005-2007 ECMWF
#
# Licensed under the GNU Lesser General Public License which
# incorporates the terms and conditions of version 3 of the GNU
# General Public License.
# See LICENSE and gpl-3.0.txt for details.

# START grib2::section
# SECTION 3, GRID DEFINITION SECTION
#  Length of section in octets

# For grib2 -> 1
constant gridDescriptionSectionPresent = 1;
position offsetSection3;

length[4] section3Length ;

#  Number of section
unsigned[1] numberOfSection = 3 :read_only;

#  Source of grid definition
# NOTE 1 NOT FOUND
codetable[1] sourceOfGridDefinition 'grib2/3.0.table';

#  Number of data points
unsigned[4] numberOfDataPoints  : dump;
alias numberOfPoints=numberOfDataPoints;

#  Number of octets for optional list of numbers defining number of points
# NOTE 2 NOT FOUND
unsigned[1] numberOfOctetsForOptionalListOfNumbersDefiningNumberOfPoints ;
alias numberOfOctectsForNumberOfPoints=numberOfOctetsForOptionalListOfNumbersDefiningNumberOfPoints;

#  Interpretation of list of numbers defining number of points
codetable[1] interpretationOfListOfNumbersDefiningNumberOfPoints 'grib2/3.11.table' : dump;
alias interpretationOfNumberOfPoints = interpretationOfListOfNumbersDefiningNumberOfPoints;

if(numberOfOctectsForNumberOfPoints  == 0){
  transient PLPresent = 0 : required,dump;
}else{
  transient PLPresent = 1 : required,dump;
}

#  Grid Definition Template Number
# (= N)
codetable[2] gridDefinitionTemplateNumber 'grib2/3.1.table';

# Octets 15-xx : Grid Definition Template (see Template 3.N, where N is the Grid Definition Template Number
# ????          grid_definition_template_see_template_3_n_where_n_is_the_grid_definition_template_number
template gridDefinitionSection "grib2/template.3.[gridDefinitionTemplateNumber:l].def";
# END   grib2::section



if(PLPresent){
  if(numberOfOctectsForNumberOfPoints == 1){
   unsigned[1] pl[Nj] : dump;
  }
  if(numberOfOctectsForNumberOfPoints == 2){
   unsigned[2] pl[Nj] : dump;
  }
  if(numberOfOctectsForNumberOfPoints == 3){
   unsigned[3] pl[Nj] : dump;
  }
}

when (PLPresent == 0) {
  set numberOfOctectsForNumberOfPoints = 0;
  set interpretationOfNumberOfPoints = 0;
}

section_padding section3Padding : read_only;



concept typeOfGrid {
  "regular_ll"  = { gridDefinitionTemplateNumber=0;  PLPresent=0;  }
  "reduced_ll"  = { gridDefinitionTemplateNumber=0;  PLPresent=1;  }
  "rotated_ll"  = { gridDefinitionTemplateNumber=1;  PLPresent=0;  }
  "stretched_ll"  = { gridDefinitionTemplateNumber=2;  PLPresent=0;  }
  "stretched_rotated_ll"  = { gridDefinitionTemplateNumber=3;  PLPresent=0;  }
  "mercator"  = { gridDefinitionTemplateNumber=10;  PLPresent=0;  }
  "polar_stereographic"  = { gridDefinitionTemplateNumber=20;  PLPresent=0;  }
  "lambert"  = { gridDefinitionTemplateNumber=30;  PLPresent=0;  }
  "albers"  = { gridDefinitionTemplateNumber=31;  PLPresent=0;  }
  "regular_gg"  = { gridDefinitionTemplateNumber=40; PLPresent=0;  }
  "reduced_gg"  = { gridDefinitionTemplateNumber=40; numberOfPointsAlongAParallel = missing(); PLPresent=1;}
  "rotated_gg"  = { gridDefinitionTemplateNumber=41; PLPresent=0;  }
  "stretched_gg"  = { gridDefinitionTemplateNumber=42; PLPresent=0;  }
  "stretched__rotated_gg"  = { gridDefinitionTemplateNumber=43; PLPresent=0;  }
  "sh"          = { gridDefinitionTemplateNumber=50; PLPresent=0;}
  "rotated_sh"          = { gridDefinitionTemplateNumber=51; PLPresent=0;}
  "stretched_sh"          = { gridDefinitionTemplateNumber=52; PLPresent=0;}
  "stretched_rotated_sh"          = { gridDefinitionTemplateNumber=53; PLPresent=0;}
  "space_view"          = { gridDefinitionTemplateNumber=90; PLPresent=0;}
  "triangular_grid"          = { gridDefinitionTemplateNumber=100; PLPresent=0;}
  "equatorial_azimuthal_equidistant"          = { gridDefinitionTemplateNumber=110; PLPresent=0;}
  "azimuth_range"          = { gridDefinitionTemplateNumber=120;PLPresent=0; }
  "cross_section"          = { gridDefinitionTemplateNumber=1000;PLPresent=0; }
  "Hovmoller"          = { gridDefinitionTemplateNumber=1100;PLPresent=0; }
  "time_section"          = { gridDefinitionTemplateNumber=1200;PLPresent=0; }
  "unknown" = {PLPresent=0;}
  "unknown_PLPresent" = {PLPresent=1;}
} : dump;

alias ls.gridType=typeOfGrid;
