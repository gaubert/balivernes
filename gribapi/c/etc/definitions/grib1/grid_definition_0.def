# Copyright 2005-2007 ECMWF
#
# Licensed under the GNU Lesser General Public License which
# incorporates the terms and conditions of version 3 of the GNU
# General Public License.
# See LICENSE and gpl-3.0.txt for details.

# grib 1 -> 2
constant gridDefinitionTemplateNumber     = 0;


# START 1/grid_definition.latitude_longitude_grid ----------------------------------------------------------------------
# GRID DEFINITION latitude/longitude grid (or equidistant cylindrical)
#  Ni - number of points along a parallel

unsigned[2] numberOfPointsAlongAParallel : can_be_missing,dump;
alias Ni          = numberOfPointsAlongAParallel;

unsigned[2] numberOfPointsAlongAMeridian : can_be_missing,dump;
alias Nj          = numberOfPointsAlongAMeridian;

# Latitudes and Longitudes of the first and the last points
# Resolution and component flags
include "grid_first_last_resandcomp.def";

unsigned[2] iDirectionIncrement : can_be_missing;
unsigned[2] jDirectionIncrement : can_be_missing;
alias Dj = jDirectionIncrement;
alias Di = iDirectionIncrement;
include "scanning_mode.def";

meta  jDirectionIncrementInDegrees latlon_increment(ijDirectionIncrementGiven,jDirectionIncrement,
  jScansPositively,
  latitudeOfFirstGridPointInDegrees,latitudeOfLastGridPointInDegrees,
  numberOfPointsAlongAMeridian,oneConstant,grib1divider,0) : can_be_missing,dump;

meta  iDirectionIncrementInDegrees latlon_increment(ijDirectionIncrementGiven,iDirectionIncrement,
  iScansPositively,
  longitudeOfFirstGridPointInDegrees,longitudeOfLastGridPointInDegrees,
  numberOfPointsAlongAParallel,oneConstant,grib1divider,1) : can_be_missing,dump;




#  Set to zero
# (reserved)

alias geography.laFirst = latitudeOfFirstGridPointInDegrees;
alias geography.loFirst = longitudeOfFirstGridPointInDegrees;

alias geography.laLast = latitudeOfLastGridPointInDegrees;
alias geography.loLast = longitudeOfLastGridPointInDegrees;
alias geography.iInc = iDirectionIncrementInDegrees;
alias geography.jInc = jDirectionIncrementInDegrees;

alias geography.gridWestEast = iDirectionIncrementInDegrees;
alias geography.gridNorthSouth = jDirectionIncrementInDegrees;

# alias geography.area = thisarea;

meta numberOfDataPoints number_of_points(Ni,Nj,PLPresent,pl) : dump;
alias numberOfPoints=numberOfDataPoints;
meta numberOfValues number_of_values(values,bitsPerValue,numberOfDataPoints,bitmapPresent,bitmap,numberOfCodedValues) : dump;
alias ls.valuesCount=numberOfValues;

#if (scanningMode == 0) {
 if(missing(numberOfPointsAlongAParallel)){
   iterator latlon_reduced(missingValue,values,laFirst,loFirst,laLast,loLast,
      Nj,jInc,pl);
   nearest reduced(values,Nj,pl);
 } else {
   iterator latlon(missingValue,values,loFirst,iInc ,Ni   ,Nj,iScansNegatively ,
                   laFirst,iInc,jScansPositively );
   nearest regular(values,Ni,Nj);
 }
#}

# END   1/grid_definition.latitude_longitude_grid ----------------------------------------------------------------------
