# Copyright 2005-2007 ECMWF
#
# Licensed under the GNU Lesser General Public License which
# incorporates the terms and conditions of version 3 of the GNU
# General Public License.
# See LICENSE and gpl-3.0.txt for details.

# label    Grib_section_2;
# START grib1::section
# SECTION 2, Grid description section
#  Length of section
# (octets)

position offsetSection2;
length[3] section2Length ;

#  NV -- number of vertical coordinate parameters

unsigned[1] numberOfVerticalCoordinateValues : dump ;

constant neitherPresent = 255;

alias NV = numberOfVerticalCoordinateValues;
alias numberOfCoordinatesValues= numberOfVerticalCoordinateValues;

#  PV -- location
# (octet number)

unsigned[1] pvlLocation = 255;

#  Data representation type
codetable[1] dataRepresentationType 'grib1/6.table' = 0;

#  Grid definition
# (according to data representation type - octet 6 above)

template dataRepresentation "grib1/grid_definition_[dataRepresentationType:l].def";
position endGridDefinition;

#alias geography.gridType = dataRepresentationType;

transient PVPresent = (pvlLocation != neitherPresent) && ( NV > 0);

position offsetBeforePV;

# Needs some padding here...

if(pvlLocation != neitherPresent)
{
padto padding_sec2_2(offsetSection2 + pvlLocation - 1);
}

if(PVPresent )
{
  ibmfloat pv[NV] : dump;
}


position offsetBeforePL;

transient PLPresent = ( pvlLocation != 255 )
      && (section2Length > (offsetBeforePL - offsetSection2))
      && (section2Length >= (Nj*2 + offsetBeforePL - offsetSection2)) : required ;

if(PLPresent)
{
  # For grib 1 -> 2
    constant numberOfOctetsForOptionalListOfNumbersDefiningNumberOfPoints = 2;
    constant interpretationOfListOfNumbersDefiningNumberOfPoints = 1;

  unsigned[2] pl[Nj] : dump;
}

if(PVPresent == 0 && PLPresent == 0)
{
  # pad to the end of the grid definiton as in documentation
  # ( gribex compatibility )
  padto padding_sec2_1(offsetSection2 + 32);
}

# Triggers
when (numberOfVerticalCoordinateValues > 0 )  set PVPresent = 1;

when (PVPresent == 0)  {  set numberOfVerticalCoordinateValues = 0;}
when ((PVPresent == 1) or (PLPresent==1))  set pvlLocation = offsetBeforePV - offsetSection2 + 1;
when ((PVPresent == 0) and (PLPresent==0)) set pvlLocation = 255;




alias reducedGrid = PLPresent;

padtoeven padding_sec2_3(offsetSection2,section2Length);
# section_padding section2Padding : read_only;
# END   grib1::section

